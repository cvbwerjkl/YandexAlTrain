/*


Для того чтобы компьютеры поддерживали актуальное время, они могут обращаться к серверам точного времени SNTP (Simple Network Time Protocol). 
К сожалению, компьютер не может просто получить время у сервера, потому что информация по сети передаётся не мгновенно: пока сообщение с текущим временем дойдёт до компьютера, оно потеряет свою актуальность. 
Протокол взаимодействия клиента (компьютера, запрашивающего точное время) и сервера (компьютера, выдающего точное время) выглядит следующим образом:

1. Клиент отправляет запрос на сервер и запоминает время отправления A (по клиентскому времени).

2. Сервер получает запрос в момент времени B (по точному серверному времени) и отправляет клиенту сообщение, содержащее время B.

3. Клиент получает ответ на свой запрос в момент времени C (по клиентскому времени) и запоминает его. Теперь клиент, из предположения, что сетевые задержки при передаче сообщений от клиента серверу и от сервера клиенту одинаковы, 
может определить и установить себе точное время, используя известные значения A, B, C.

Вам предстоит реализовать алгоритм, с точностью до секунды определяющий точное время для установки на клиенте по известным A, B и C. При необходимости округлите результат до целого числа секунд по правилам арифметики 
(в меньшую сторону, если дробная часть числа меньше 1/2, иначе в большую сторону).

Возможно, что, пока клиент ожидал ответа, по клиентскому времени успели наступить новые сутки, однако известно, что между отправкой клиентом запроса и получением ответа от сервера прошло менее 24 часов.
 


*/

#include <iostream>



int main() {

    char time;
    int a, b, c, d;

    a = (getchar() - '0') * 36000;
    a = a + (getchar() - '0') * 3600;
    getchar();
    a = a + (getchar() - '0') * 600;
    a = a + (getchar() - '0') * 60;
    getchar();
    a = a + (getchar() - '0') * 10;
    a = a + (getchar() - '0');
    getchar();
    b = (getchar() - '0') * 36000;
    b = b + (getchar() - '0') * 3600;
    getchar();
    b = b + (getchar() - '0') * 600;
    b = b + (getchar() - '0') * 60;
    getchar();
    b = b + (getchar() - '0') * 10;
    b = b + (getchar() - '0');
    getchar();
    c = (getchar() - '0') * 36000;
    c = c + (getchar() - '0') * 3600;
    getchar();
    c = c + (getchar() - '0') * 600;
    c = c + (getchar() - '0') * 60;
    getchar();
    c = c + (getchar() - '0') * 10;
    c = c + (getchar() - '0');

    if (a > c) {
        d = b + (c + 86400 - a) / 2;
        if ((c + 86400 - a) % 2 == 1) d += 1;
    }
    else {
        d = b + (c - a) / 2;
        if ((c - a) % 2 == 1) d += 1;
    }

    a = d / 3600 % 24;
    b = (d % 3600) / 60;
    c = (d % 3600) % 60;


    if (a < 10) {
        std::cout << "0" << a << ":";
    }
    else {
        std::cout << a << ":";
    }
    if (b < 10) {
        std::cout << "0" << b << ":";
    }
    else {
        std::cout << b << ":";
    }

    if (c < 10) {
        std::cout << "0" << c;
    }
    else {
        std::cout << c;
    }


    return 0;
}